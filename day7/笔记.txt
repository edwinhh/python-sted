1、面向对象
        类：一个模型，一个图纸。
        对象：根据模型做出来的东西就是实例。
        实例：实例和对象是一回事。
        实例化：就是根据模型做具体东西的过程。
        self:本类对象。

        继承：
            私有方法、私有变量不会被继承
            1、如果要在父类方法的基础上重写扩展功能，super().xxx调用父类，然后把
            对应的参数，传入即可
            super会自动找到父类

        抽象类：一个规范，
        封装：
        静态方法：只是写在类里面的一个方法，不能使用类变量,调用不了其他的类方法
        实例方法：必须要实例化之后才能使用的函数。
        实例变量：类的属性就是变量，必须要实例化之后才能使用的变量
        类变量：在类里面直接定义的变量
        类方法：不用实例化，通过类名就可以直接调用的方法，用实例也可以调用
        属性方法：看起来像变量的一个函数。
        构造函数:类在实例化的时候自动调用的方法
        析构函数：实例被销毁的时候自动调用的方法
        私有方法：只能在类里面调用，出了类就不行了
        私有变量：只能在里面用,出了类就不行了

        1、怎么定义类
            class My:
                def __init__(self,name):
                    self.name = name
                def func(self)
                    self.name = 'hha'
                    pass
                def func2(self):
                    self.func()
             m = My()
             m.func()
             m.name


处理
        主动抛出
3、单元测试
上周回顾：
    1、网络编程
        requests.get(url,{"k":v})
        requests.post(url,{"k":"v"})
        r = requests.post(url,json={"k":"v"})

        r.json()
        r.text
        r.content


    2、日志、发邮件、jsonpath

    3、mock接口
        import flask

上周作业：
    1、通过群号，获取到群成员信息，下载头像
        1、请求qq群接口
        2、获取到每个人的昵称和qq号
        3、下载图片
    2、写2个接口
        1、登录接口

        2、支付的接口
            sessionid
            money

    1、接收 账号密码，校验账号密码 （从数据库）
    2、判断出错、还是正常
    3、账号/密码正确之后，要产生sessionid
    4、username+timestamp+salt md5,产生sessionid
    5、redis sessionid   sessionid -> {"user_id":1,"nick":"xxx"}  600
    7、返回数据 sessionid

    2、
1、多线程、多进程
2、单元测试
3、接口自动化

